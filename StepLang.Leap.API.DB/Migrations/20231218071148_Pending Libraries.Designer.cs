// <auto-generated />
using System;
using Leap.API.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Leap.API.DB.Migrations
{
    [DbContext(typeof(LeapApiDbContext))]
    [Migration("20231218071148_Pending Libraries")]
    partial class PendingLibraries
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorLibrary", b =>
                {
                    b.Property<Guid>("LibrariesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaintainersId")
                        .HasColumnType("uuid");

                    b.HasKey("LibrariesId", "MaintainersId");

                    b.HasIndex("MaintainersId");

                    b.ToTable("AuthorLibrary");
                });

            modelBuilder.Entity("Leap.API.DB.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Leap.API.DB.Entities.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LatestVersionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LatestVersionId");

                    b.HasIndex("Author", "Name")
                        .IsUnique();

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Leap.API.DB.Entities.LibraryLink", b =>
                {
                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.Property<int>("Nature")
                        .HasColumnType("integer");

                    b.Property<string>("VersionRange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SourceId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("LibraryLink");
                });

            modelBuilder.Entity("Leap.API.DB.Entities.LibraryVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryVersions");
                });

            modelBuilder.Entity("Leap.API.DB.Entities.PendingLibraryVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UploaderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("UploaderId");

                    b.ToTable("PendingLibraryVersions");
                });

            modelBuilder.Entity("AuthorLibrary", b =>
                {
                    b.HasOne("Leap.API.DB.Entities.Library", null)
                        .WithMany()
                        .HasForeignKey("LibrariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leap.API.DB.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("MaintainersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leap.API.DB.Entities.Library", b =>
                {
                    b.HasOne("Leap.API.DB.Entities.LibraryVersion", "LatestVersion")
                        .WithMany()
                        .HasForeignKey("LatestVersionId");

                    b.Navigation("LatestVersion");
                });

            modelBuilder.Entity("Leap.API.DB.Entities.LibraryLink", b =>
                {
                    b.HasOne("Leap.API.DB.Entities.LibraryVersion", "Source")
                        .WithMany("Links")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leap.API.DB.Entities.Library", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Leap.API.DB.Entities.LibraryVersion", b =>
                {
                    b.HasOne("Leap.API.DB.Entities.Library", "Library")
                        .WithMany("Versions")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Leap.API.DB.Entities.PendingLibraryVersion", b =>
                {
                    b.HasOne("Leap.API.DB.Entities.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leap.API.DB.Entities.Author", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Leap.API.DB.Entities.Library", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Leap.API.DB.Entities.LibraryVersion", b =>
                {
                    b.Navigation("Links");
                });
#pragma warning restore 612, 618
        }
    }
}
